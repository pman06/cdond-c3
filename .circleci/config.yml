version: 2.1

executors:
  docker-node:
    docker:
      - image: circleci/node:13.8.0
  
  aws-cli:
    docker:
      - image: amazon/aws-cli
  
  alpine:
    docker:
      - image: alpine:latest

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  notify_fail:
    steps:
      - slack/notify:
          event: fail
          mentions: '@paulshoremekun'
          template: basic_fail_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string    # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/5kLRAEAZqV6HxdRmEDMvdG/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_fail

  build-backend:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_fail

  test-frontend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      - run :
          name: "Run frontend test"
          command: |
            cd frontend
            npm run test
      - notify_fail
                
  test-backend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      - run :   # Your job code here
          name: "run backend test"
          command: |
            cd backend
            npm run test
      - notify_fail
            
  scan-frontend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-build]   # Restore from cache
      - run:      # Your job code here
          name: "Scan frontend for vuln"
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_fail 
      
  scan-backend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache:  # Restore from cache
          keys: [backend-build]
      - run:    # Your job code here
          name: "Scan backend for vuln"     
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical     
      - notify_fail

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      