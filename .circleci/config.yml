version: 2.1

executors:
  docker-node:
    docker:
      - image: circleci/node:13.8.0
  
  aws-cli:
    docker:
      - image: amazon/aws-cli
  
  alpine:
    docker:
      - image: alpine:latest

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7}
  notify_fail:
    steps:
      - slack/notify:
          event: fail
          mentions: '@paulshoremekun'
          template: basic_fail_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string    # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/5kLRAEAZqV6HxdRmEDMvdG/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_fail

  build-backend:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_fail

  test-frontend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      - run :
          name: "Run frontend test"
          command: |
            cd frontend
            npm run test
      - notify_fail
                
  test-backend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      - run :   # Your job code here
          name: "run backend test"
          command: |
            cd backend
            npm run test
      - notify_fail
            
  scan-frontend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-build]   # Restore from cache
      - run:      # Your job code here
          name: "Scan frontend for vuln"
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_fail 
      
  scan-backend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache:  # Restore from cache
          keys: [backend-build]
      - run:    # Your job code here
          name: "Scan backend for vuln"     
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical     
      - notify_fail 

  deploy-infrastructure:
    executor: aws-cli
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install tar gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - notify_fail 
      - destroy-environment # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    executor:  alpine
    steps:
      - checkout # Checkout code from git
      -  add_ssh_keys: # Add ssh keys with fingerprint
          fingerprints:
            - "c0:3d:35:85:bb:69:71:39:8a:61:b4:b7:61:25:e0:6a"
      - attach_workspace:  # attach workspace
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment  # Here's where you will add some code to rollback on failure      

  run-migrations:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
      - run: cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to memstash/kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure 'https://kvdb.io/5kLRAEAZqV6HxdRmEDMvdG/migration_${CIRCLE_WORKFLOW_ID:0:7}'  -d '1'
            fi
      - destroy-environment  # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y  tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt| head -2 | tail -1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL=$API_URL >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: "Run tar"
          command: |
            pwd
            cd frontend
            tar czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run:
          name: copy to s3 bucket      
          command: |
            cd frontend
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      -  add_ssh_keys: # Add ssh keys with fingerprint
          fingerprints:
            - "c0:3d:35:85:bb:69:71:39:8a:61:b4:b7:61:25:e0:6a"
      - attach_workspace:  # attach workspace
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y  tar gzip ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: zip file
          command: |
            tar -C backend -czvf artifact.tar.gz . 
      - run:
          name: Start Ansible playbook      
          command: | 
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment # Here's where you will add some code to rollback on failure  

  smoke-test:
    executor: docker-node
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt| head -2 | tail -1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}/api/status" 
            curl -s "${API_URL}/api/status"
            sleep 60
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment  # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    executor: aws-cli
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            --tags project=udapeople 
      - destroy-environment # Here's where you will add some code to rollback on failure   
      

  cleanup:
    executor: alpine
    steps:
      - checkout # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text
            echo Stack names: "${STACKS[@]}" 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
  build-jobs:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          context: ALERTS
          requires: [build-frontend]
      - test-backend:
          context: ALERTS
          requires: [build-backend]
      - scan-backend:
          context: ALERTS
          requires: [build-backend]
      - scan-frontend:
          context: ALERTS
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]